:javascript
  // store list of upcoming_path markers
  var upcoming_path_lines = {};

  var directionsService = new google.maps.DirectionsService();
  
  // draw run upcoming_path location on map
  function drawUpcomingPath(run_id, waypoints) {
    // remove previous renderer
    removeUpcomingPath(run_id);

    // split into multiple requests to overcome google maps directions service limit
    var maxLimit = #{ENV['GOOGLE_DIRECTIONS_WAYPOINT_LIMIT'] || 25};
    var chunks = []; 
    for (var i=0,j=waypoints.length; i<j; i+=maxLimit) {
      chunks.push(waypoints.slice((i == 0 ? 0 : i-1),i+maxLimit));
    }

    chunks.forEach(function(chunk) {
      var ptCount = chunk.length;
      if(ptCount < 2) {
        return;
      }

      requestDirections(run_id, chunk[0], chunk[ptCount - 1], chunk.slice(1,ptCount - 1));
    });
  }

  function requestDirections(run_id, start_latlng, end_latlng, waypoints_latlngs) {
    if(!start_latlng || !end_latlng) {
      return;
    }
    
    var directionsDisplay = new google.maps.DirectionsRenderer({
      map: map,
      suppressMarkers: true,
      preserveViewport: true,
      polylineOptions: {
        color: "red",
        strokeColor: "blue",
        strokeWeight: 3,
        strokeOpacity: 0.6
      }
    });

    var origin = new google.maps.LatLng(start_latlng[0], start_latlng[1]);
    var dest = new google.maps.LatLng(end_latlng[0], end_latlng[1]);
    var waypoints = [];
    waypoints_latlngs.forEach(function(pt) {
      if(pt && pt.length == 2) {
        waypoints.push({
          location: new google.maps.LatLng(pt[0], pt[1]),
          stopover: true
        });
      }
    });

    var request = {
      origin: origin,
      destination: dest,
      waypoints: waypoints,
      travelMode: 'DRIVING'
    };

    directionsService.route(request, function(result, status) {
      if (status == 'OK') {
        directionsDisplay.setDirections(result);
        if(!upcoming_path_lines[run_id]) {
          upcoming_path_lines[run_id] = [];
        }
        upcoming_path_lines[run_id].push(directionsDisplay);
      }
    });
  }

  function removeUpcomingPath(run_id) {
    if(upcoming_path_lines[run_id]) {
      upcoming_path_lines[run_id].forEach(r => r.setMap(null));
    }

    upcoming_path_lines[run_id] = [];
  }